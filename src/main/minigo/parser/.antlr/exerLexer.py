# Generated from c:/Users/PC/Desktop/PPL/BTL/initial/initial/src/main/minigo/parser/lexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,61,443,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,1,0,4,0,137,8,0,11,0,12,0,138,1,0,1,0,1,1,1,1,
        1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,5,4,155,8,4,10,4,12,4,158,
        9,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,166,8,5,10,5,12,5,169,9,5,1,5,1,
        5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,5,23,
        280,8,23,10,23,12,23,283,9,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,
        1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,
        1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,
        1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
        1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,
        1,54,1,54,1,54,1,54,3,54,361,8,54,1,55,1,55,1,55,5,55,366,8,55,10,
        55,12,55,369,9,55,3,55,371,8,55,1,56,1,56,1,56,1,56,3,56,377,8,56,
        1,56,4,56,380,8,56,11,56,12,56,381,1,57,1,57,1,57,1,57,3,57,388,
        8,57,1,57,4,57,391,8,57,11,57,12,57,392,1,58,1,58,1,58,1,58,3,58,
        399,8,58,1,58,4,58,402,8,58,11,58,12,58,403,1,59,4,59,407,8,59,11,
        59,12,59,408,1,59,1,59,5,59,413,8,59,10,59,12,59,416,9,59,1,59,1,
        59,3,59,420,8,59,1,59,4,59,423,8,59,11,59,12,59,424,3,59,427,8,59,
        1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,
        1,66,1,66,2,156,167,0,67,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
        53,107,54,109,55,111,0,113,0,115,0,117,0,119,56,121,57,123,0,125,
        0,127,58,129,59,131,60,133,61,1,0,11,3,0,9,9,13,13,32,32,2,0,10,
        10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        49,57,1,0,48,57,1,0,48,49,1,0,48,55,3,0,48,57,65,70,97,102,2,0,69,
        69,101,101,2,0,43,43,45,45,456,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
        0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
        0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
        0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,127,
        1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,1,136,1,0,0,0,
        3,142,1,0,0,0,5,146,1,0,0,0,7,148,1,0,0,0,9,150,1,0,0,0,11,161,1,
        0,0,0,13,175,1,0,0,0,15,178,1,0,0,0,17,183,1,0,0,0,19,187,1,0,0,
        0,21,194,1,0,0,0,23,199,1,0,0,0,25,204,1,0,0,0,27,211,1,0,0,0,29,
        221,1,0,0,0,31,228,1,0,0,0,33,232,1,0,0,0,35,238,1,0,0,0,37,246,
        1,0,0,0,39,252,1,0,0,0,41,256,1,0,0,0,43,265,1,0,0,0,45,271,1,0,
        0,0,47,277,1,0,0,0,49,284,1,0,0,0,51,286,1,0,0,0,53,288,1,0,0,0,
        55,290,1,0,0,0,57,292,1,0,0,0,59,294,1,0,0,0,61,297,1,0,0,0,63,300,
        1,0,0,0,65,302,1,0,0,0,67,305,1,0,0,0,69,307,1,0,0,0,71,310,1,0,
        0,0,73,313,1,0,0,0,75,316,1,0,0,0,77,318,1,0,0,0,79,321,1,0,0,0,
        81,324,1,0,0,0,83,327,1,0,0,0,85,330,1,0,0,0,87,333,1,0,0,0,89,336,
        1,0,0,0,91,338,1,0,0,0,93,340,1,0,0,0,95,342,1,0,0,0,97,344,1,0,
        0,0,99,346,1,0,0,0,101,348,1,0,0,0,103,350,1,0,0,0,105,352,1,0,0,
        0,107,354,1,0,0,0,109,360,1,0,0,0,111,370,1,0,0,0,113,376,1,0,0,
        0,115,387,1,0,0,0,117,398,1,0,0,0,119,406,1,0,0,0,121,428,1,0,0,
        0,123,431,1,0,0,0,125,433,1,0,0,0,127,435,1,0,0,0,129,437,1,0,0,
        0,131,439,1,0,0,0,133,441,1,0,0,0,135,137,7,0,0,0,136,135,1,0,0,
        0,137,138,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,
        0,140,141,6,0,0,0,141,2,1,0,0,0,142,143,5,10,0,0,143,144,1,0,0,0,
        144,145,6,1,0,0,145,4,1,0,0,0,146,147,5,12,0,0,147,6,1,0,0,0,148,
        149,5,13,0,0,149,8,1,0,0,0,150,151,5,47,0,0,151,152,5,47,0,0,152,
        156,1,0,0,0,153,155,8,1,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,
        157,1,0,0,0,156,154,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,
        160,6,4,0,0,160,10,1,0,0,0,161,162,5,47,0,0,162,163,5,42,0,0,163,
        167,1,0,0,0,164,166,8,1,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,
        168,1,0,0,0,167,165,1,0,0,0,168,170,1,0,0,0,169,167,1,0,0,0,170,
        171,5,42,0,0,171,172,5,47,0,0,172,173,1,0,0,0,173,174,6,5,0,0,174,
        12,1,0,0,0,175,176,5,105,0,0,176,177,5,102,0,0,177,14,1,0,0,0,178,
        179,5,101,0,0,179,180,5,108,0,0,180,181,5,115,0,0,181,182,5,101,
        0,0,182,16,1,0,0,0,183,184,5,102,0,0,184,185,5,111,0,0,185,186,5,
        114,0,0,186,18,1,0,0,0,187,188,5,114,0,0,188,189,5,101,0,0,189,190,
        5,116,0,0,190,191,5,117,0,0,191,192,5,114,0,0,192,193,5,110,0,0,
        193,20,1,0,0,0,194,195,5,102,0,0,195,196,5,117,0,0,196,197,5,110,
        0,0,197,198,5,99,0,0,198,22,1,0,0,0,199,200,5,116,0,0,200,201,5,
        121,0,0,201,202,5,112,0,0,202,203,5,101,0,0,203,24,1,0,0,0,204,205,
        5,115,0,0,205,206,5,116,0,0,206,207,5,114,0,0,207,208,5,117,0,0,
        208,209,5,99,0,0,209,210,5,116,0,0,210,26,1,0,0,0,211,212,5,105,
        0,0,212,213,5,110,0,0,213,214,5,116,0,0,214,215,5,101,0,0,215,216,
        5,114,0,0,216,217,5,102,0,0,217,218,5,97,0,0,218,219,5,99,0,0,219,
        220,5,101,0,0,220,28,1,0,0,0,221,222,5,115,0,0,222,223,5,116,0,0,
        223,224,5,114,0,0,224,225,5,105,0,0,225,226,5,110,0,0,226,227,5,
        103,0,0,227,30,1,0,0,0,228,229,5,105,0,0,229,230,5,110,0,0,230,231,
        5,116,0,0,231,32,1,0,0,0,232,233,5,102,0,0,233,234,5,108,0,0,234,
        235,5,111,0,0,235,236,5,97,0,0,236,237,5,116,0,0,237,34,1,0,0,0,
        238,239,5,98,0,0,239,240,5,111,0,0,240,241,5,111,0,0,241,242,5,108,
        0,0,242,243,5,101,0,0,243,244,5,97,0,0,244,245,5,110,0,0,245,36,
        1,0,0,0,246,247,5,99,0,0,247,248,5,111,0,0,248,249,5,110,0,0,249,
        250,5,115,0,0,250,251,5,116,0,0,251,38,1,0,0,0,252,253,5,118,0,0,
        253,254,5,97,0,0,254,255,5,114,0,0,255,40,1,0,0,0,256,257,5,99,0,
        0,257,258,5,111,0,0,258,259,5,110,0,0,259,260,5,116,0,0,260,261,
        5,105,0,0,261,262,5,110,0,0,262,263,5,117,0,0,263,264,5,101,0,0,
        264,42,1,0,0,0,265,266,5,98,0,0,266,267,5,114,0,0,267,268,5,101,
        0,0,268,269,5,97,0,0,269,270,5,107,0,0,270,44,1,0,0,0,271,272,5,
        114,0,0,272,273,5,97,0,0,273,274,5,110,0,0,274,275,5,103,0,0,275,
        276,5,101,0,0,276,46,1,0,0,0,277,281,7,2,0,0,278,280,7,3,0,0,279,
        278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,
        48,1,0,0,0,283,281,1,0,0,0,284,285,5,43,0,0,285,50,1,0,0,0,286,287,
        5,45,0,0,287,52,1,0,0,0,288,289,5,42,0,0,289,54,1,0,0,0,290,291,
        5,47,0,0,291,56,1,0,0,0,292,293,5,37,0,0,293,58,1,0,0,0,294,295,
        5,61,0,0,295,296,5,61,0,0,296,60,1,0,0,0,297,298,5,33,0,0,298,299,
        5,61,0,0,299,62,1,0,0,0,300,301,5,60,0,0,301,64,1,0,0,0,302,303,
        5,60,0,0,303,304,5,61,0,0,304,66,1,0,0,0,305,306,5,62,0,0,306,68,
        1,0,0,0,307,308,5,62,0,0,308,309,5,61,0,0,309,70,1,0,0,0,310,311,
        5,38,0,0,311,312,5,38,0,0,312,72,1,0,0,0,313,314,5,124,0,0,314,315,
        5,124,0,0,315,74,1,0,0,0,316,317,5,33,0,0,317,76,1,0,0,0,318,319,
        5,58,0,0,319,320,5,61,0,0,320,78,1,0,0,0,321,322,5,43,0,0,322,323,
        5,61,0,0,323,80,1,0,0,0,324,325,5,45,0,0,325,326,5,61,0,0,326,82,
        1,0,0,0,327,328,5,42,0,0,328,329,5,61,0,0,329,84,1,0,0,0,330,331,
        5,47,0,0,331,332,5,61,0,0,332,86,1,0,0,0,333,334,5,37,0,0,334,335,
        5,61,0,0,335,88,1,0,0,0,336,337,5,61,0,0,337,90,1,0,0,0,338,339,
        5,46,0,0,339,92,1,0,0,0,340,341,5,40,0,0,341,94,1,0,0,0,342,343,
        5,41,0,0,343,96,1,0,0,0,344,345,5,123,0,0,345,98,1,0,0,0,346,347,
        5,125,0,0,347,100,1,0,0,0,348,349,5,91,0,0,349,102,1,0,0,0,350,351,
        5,93,0,0,351,104,1,0,0,0,352,353,5,44,0,0,353,106,1,0,0,0,354,355,
        5,59,0,0,355,108,1,0,0,0,356,361,3,111,55,0,357,361,3,113,56,0,358,
        361,3,115,57,0,359,361,3,117,58,0,360,356,1,0,0,0,360,357,1,0,0,
        0,360,358,1,0,0,0,360,359,1,0,0,0,361,110,1,0,0,0,362,371,5,48,0,
        0,363,367,7,4,0,0,364,366,7,5,0,0,365,364,1,0,0,0,366,369,1,0,0,
        0,367,365,1,0,0,0,367,368,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,
        0,370,362,1,0,0,0,370,363,1,0,0,0,371,112,1,0,0,0,372,373,5,48,0,
        0,373,377,5,98,0,0,374,375,5,48,0,0,375,377,5,66,0,0,376,372,1,0,
        0,0,376,374,1,0,0,0,377,379,1,0,0,0,378,380,7,6,0,0,379,378,1,0,
        0,0,380,381,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,114,1,0,
        0,0,383,384,5,48,0,0,384,388,5,111,0,0,385,386,5,48,0,0,386,388,
        5,79,0,0,387,383,1,0,0,0,387,385,1,0,0,0,388,390,1,0,0,0,389,391,
        7,7,0,0,390,389,1,0,0,0,391,392,1,0,0,0,392,390,1,0,0,0,392,393,
        1,0,0,0,393,116,1,0,0,0,394,395,5,48,0,0,395,399,5,120,0,0,396,397,
        5,48,0,0,397,399,5,88,0,0,398,394,1,0,0,0,398,396,1,0,0,0,399,401,
        1,0,0,0,400,402,7,8,0,0,401,400,1,0,0,0,402,403,1,0,0,0,403,401,
        1,0,0,0,403,404,1,0,0,0,404,118,1,0,0,0,405,407,7,5,0,0,406,405,
        1,0,0,0,407,408,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,410,
        1,0,0,0,410,414,5,46,0,0,411,413,7,5,0,0,412,411,1,0,0,0,413,416,
        1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,426,1,0,0,0,416,414,
        1,0,0,0,417,419,7,9,0,0,418,420,7,10,0,0,419,418,1,0,0,0,419,420,
        1,0,0,0,420,422,1,0,0,0,421,423,7,5,0,0,422,421,1,0,0,0,423,424,
        1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,427,1,0,0,0,426,417,
        1,0,0,0,426,427,1,0,0,0,427,120,1,0,0,0,428,429,5,34,0,0,429,430,
        5,34,0,0,430,122,1,0,0,0,431,432,9,0,0,0,432,124,1,0,0,0,433,434,
        9,0,0,0,434,126,1,0,0,0,435,436,9,0,0,0,436,128,1,0,0,0,437,438,
        9,0,0,0,438,130,1,0,0,0,439,440,9,0,0,0,440,132,1,0,0,0,441,442,
        9,0,0,0,442,134,1,0,0,0,19,0,138,156,167,281,360,367,370,376,381,
        387,392,398,403,408,414,419,424,426,1,6,0,0
    ]

class exerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    NL = 2
    FF = 3
    CR = 4
    COMMENT = 5
    MULTIL_COMMENT = 6
    IF = 7
    ELSE = 8
    FOR = 9
    RETURN = 10
    FUNC = 11
    TYPE = 12
    STRUCT = 13
    INTERFACE = 14
    STRING = 15
    INT = 16
    FLOAT = 17
    BOOLEAN = 18
    CONST = 19
    VAR = 20
    CONTINUE = 21
    BREAK = 22
    RANGE = 23
    ID = 24
    ADD = 25
    SUB = 26
    MUL = 27
    DIV = 28
    MOD = 29
    EQ = 30
    NEQ = 31
    LT = 32
    LE = 33
    GT = 34
    GE = 35
    AND = 36
    OR = 37
    NOT = 38
    DECL_ASSIGN = 39
    ADD_ASSIGN = 40
    SUB_ASSIGN = 41
    MUL_ASSIGN = 42
    DIV_ASSIGN = 43
    MOD_ASSIGN = 44
    ASSIGN = 45
    DOT = 46
    L_PAREN = 47
    R_PAREN = 48
    L_CURLY = 49
    R_CURLY = 50
    L_BRACKET = 51
    R_BRACKET = 52
    COMMA = 53
    SEMICOLON = 54
    INT_LIT = 55
    FLOAT_LIT = 56
    STRING_LIT = 57
    BOOL_LIT = 58
    ERROR_CHAR = 59
    ILLEGAL_ESCAPE = 60
    UNCLOSE_STRING = 61

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\\n'", "'\\f'", "'\\r'", "'if'", "'else'", "'for'", "'return'", 
            "'func'", "'type'", "'struct'", "'interface'", "'string'", "'int'", 
            "'float'", "'boolean'", "'const'", "'var'", "'continue'", "'break'", 
            "'range'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", 
            "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", "':='", 
            "'+='", "'-='", "'*='", "'/='", "'%='", "'='", "'.'", "'('", 
            "')'", "'{'", "'}'", "'['", "']'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "NL", "FF", "CR", "COMMENT", "MULTIL_COMMENT", "IF", "ELSE", 
            "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", "STRING", 
            "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", 
            "RANGE", "ID", "ADD", "SUB", "MUL", "DIV", "MOD", "EQ", "NEQ", 
            "LT", "LE", "GT", "GE", "AND", "OR", "NOT", "DECL_ASSIGN", "ADD_ASSIGN", 
            "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ASSIGN", 
            "DOT", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", 
            "R_BRACKET", "COMMA", "SEMICOLON", "INT_LIT", "FLOAT_LIT", "STRING_LIT", 
            "BOOL_LIT", "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    ruleNames = [ "WS", "NL", "FF", "CR", "COMMENT", "MULTIL_COMMENT", "IF", 
                  "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
                  "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
                  "BREAK", "RANGE", "ID", "ADD", "SUB", "MUL", "DIV", "MOD", 
                  "EQ", "NEQ", "LT", "LE", "GT", "GE", "AND", "OR", "NOT", 
                  "DECL_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                  "DIV_ASSIGN", "MOD_ASSIGN", "ASSIGN", "DOT", "L_PAREN", 
                  "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", 
                  "COMMA", "SEMICOLON", "INT_LIT", "DECIMAL_LIT", "BIN_LIT", 
                  "OCTAL_LIT", "HEX_LIT", "FLOAT_LIT", "STRING_LIT", "ESC", 
                  "CHAR", "BOOL_LIT", "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    grammarFileName = "lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


